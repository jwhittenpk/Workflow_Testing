# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Create Release from Develop

on: workflow_dispatch

jobs:
  Create_Release:
    runs-on: windows-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      fail-fast: false
      matrix:
        os: ['windows']
        jdk: [ '1.8' ]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Clone the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jdk }}

      # FIXME: Reminder to restore all 'mvn' to './mvnw' in real PK-Bridge
      # FIXME: Also '-s .mvn/wrapper/settings.xml'
      #      - name: File System preparation
      #        run: |
      #          chmod 755 mvnw

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-

      - name: Set up cache for NSIS v2.46
        id: cache_NSIS
        uses: actions/cache@v2
        with:
          path: C:\Program Files (x86)\NSIS
          key: ${{ matrix.os }}-nsis

      # $RELEASE_VERSION should be <project.version> without -SNAPSHOT, eg "1.0.245-SNAPSHOT" would be "1.0.245".
      # $RELEASE_BUILD should be <project.version> with a new qualifier of '-r[Date_Time of commit].[commit short sha]', eg "1.0.245-r20220914_1547.abcdef"
      - name: Calculate Release Version
        run: |
          $RELEASE_VERSION=(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout -s .mvn/wrapper/settings.xml).Trim("-SNAPSHOT")
          $COMMIT_DATETIME=(git log -n 1 --pretty=format:"%cd" --date='format:%Y%m%d_%H%M%S')
          $RELEASE_BUILD=$RELEASE_VERSION+'-r'+$COMMIT_DATETIME+'.'+$(git rev-parse --short HEAD)
          echo "Release branch will be tagged $RELEASE_VERSION after completion."
          echo "Release build will be $RELEASE_BUILD after completion."
          echo "Release_Version=$RELEASE_VERSION" >> $env:GITHUB_ENV
          echo "Release_Build=$RELEASE_BUILD" >> $env:GITHUB_ENV

      - name: Create Release Branch from Develop
        id: create-branch
        run: |
          git switch develop
          git checkout -b release/${{ env.Release_Version }}
          git push --set-upstream origin release/${{ env.Release_Version }}

      # See: https://cli.github.com/manual/
      - name: Create pull request for Release into Master
        run: >
          gh pr create
          --base master
          --head release/${{ env.Release_Version }}
          --title "Merge ${{ env.Release_Version }} into Master"
          --body "Created by GitHub action"

      # Required for Bridge to build via Maven
      #      - name: Checkout config files before maven build
      #        uses: actions/checkout@release
      #        with:
      #          repository: 'hcapatientkeeper/MOB_8_2_CONFIG'
      #          token: ${{ secrets.ORG_GHTOKEN }}
      #          path: config

      # Build Release branch
      - name: Build Release ${{ env.Release_Build }} with Maven
        # FIXME: Change this from install to deploy.
        # Update version.txt file to allow users to quickly determine Bridge version.
        #          echo "${{ steps.calculate_release_version.outputs.release-version }}" > bridge-backend/meditechConfig/version.txt
        run: |
          mvn versions:set -DnewVersion="${{ env.Release_Build }}" versions:commit
          mvn --batch-mode clean install

      # Required for Bridge to build *.exe installer
      - name: Install NSIS if not cached
        if: steps.cache_NSIS.outputs.cache-hit != 'true'
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
          choco install nsis.install --version=2.46 -y -dv

      # This step overwrites parts of the NSIS program with PK specific code.  I don't know what exactly.
      #      - name: Extract NSIS log if not cached
      #        if: steps.cache_NSIS.outputs.cache-hit != 'true'
      #        run: |
      #          echo "$(pwd)"
      #          7z.exe x "D:\a\pk-bridge\pk-bridge\bridge-build\nsis-2.46-log.zip" -o"C:\Program Files (x86)\NSIS" -y -r
      #          cd "D:\a\pk-bridge\pk-bridge"
      #          echo "$(pwd)"
      #          dir

      # Create Bridge.zip and Bridge.exe
      #      - name: Create Bridge installer
      #        run: |
      #          & 'C:\Program Files (x86)\NSIS\makensis.exe' /DMIM_FILENAME="D:\a\pk-bridge\pk-bridge\bridge-build\bridge.zip" /DVERSION_NUMBER="${{ env.Release_Build }}" /DPRODUCT_VERSION="${{ env.Release_Build }}" "D:\a\pk-bridge\pk-bridge\installer\bridge\bridge.nsi"

      # Copy zip and exe files to staging. Add version number to .exe file.
      # Then upload them to GitHub via deploy.
      #      - name: Copy and Upload Bridge zip, exe, and setupexe via Maven
      #        run: |
      #          mkdir staging
      #          copy "D:/a/pk-bridge/pk-bridge/bridge-build/*.zip" staging
      #          copy "D:/a/pk-bridge/pk-bridge/installer/bridge/*.exe" staging
      #          copy "D:\a\pk-bridge\pk-bridge\installer\bridge\bridgesetup-${{ env.Release_Build }}.exe" "D:\a\pk-bridge\pk-bridge\staging\bridge.exe"
      #          ./mvnw --batch-mode -f "uploadzip.xml" clean deploy -Drevision="${{ env.Release_Build }}" -s .mvn/wrapper/settings.xml
      #          ./mvnw --batch-mode -f "uploadexe.xml" clean deploy -Drevision="${{ env.Release_Build }}" -s .mvn/wrapper/settings.xml
      #          ./mvnw --batch-mode -f "uploadsetupexe.xml" clean deploy -Drevision="${{ env.Release_Build }}" -s .mvn/wrapper/settings.xml