# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Bump Develop version after merge to Master

# Purpose: This will bump the project.version of Develop's pom.xml by 1 minor version after being merged into Master via Pull Request.
# Steps:
# 1. Checkout Master.
# 2. Get the current project.version from the pom.xml in Master.
# 3. Increase the Minor version of Develop by 1.  Reset Patch version to 0.  Change Qualifier to -SNAPSHOT.
# 4. Set the project.version and commit the pom.xml change to Develop.
# 5. Create a pull request to bump the version number and to merge any changes that might have been done in release/**.

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  Build_bridge:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/') && github.base_ref == 'master'
    runs-on: windows-latest

    env:
      GITHUB_TOKEN: ${{ secrets.JW_TOKEN }}

    strategy:
      fail-fast: false
      matrix:
        os: ['windows']
        jdk: [ '1.8' ]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Master
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jdk }}

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-

      - name: Set up cache for NSIS v2.46
        id: cache_NSIS
        uses: actions/cache@v2
        with:
          path: C:\Program Files (x86)\NSIS
          key: ${{ matrix.os }}-nsis

      - name: Calculate next version
        run: |
          $CURRENT=mvn help:evaluate -Dexpression=project.version -q -DforceStdout
          $MAJOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.minorVersion" -q -DforceStdout
          $NEXT_VERSION=$MAJOR+'.'+$MINOR+'.0-SNAPSHOT'
          echo "Current version is $CURRENT"
          echo "Develop will be bumped to $NEXT_VERSION"
          echo "nextVersion=$NEXT_VERSION" >> $env:GITHUB_ENV

      - name: Create bump Feature Branch from Master
        run: |
          git checkout -b feature/${{ env.nextVersion }}
          git push --set-upstream origin feature/${{ env.nextVersion }}

      - name: Bump Develop version to ${{ env.nextVersion }}
        run: |
          mvn versions:set -DnewVersion=${{ env.nextVersion }} versions:commit
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "POM Develop bumped to ${{ env.nextVersion }}"
          git pull
          git push

      # See: https://cli.github.com/manual/
      - name: Create pull request to Bump version in Develop
        run: >
          gh pr create
          --base develop
          --head feature/${{ env.nextVersion }}
          --title "Bump Develop to ${{ env.nextVersion }}"
          --body "Merge all possible changes from Release branch.  Also bump the Develop branch version to ${{ env.nextVersion }}.  This is an automated Pull Request created by GitHub action."

      ## The rest of this is taken from maven-feature-build.yml

      - name: Get latest tag
        run: |
          $TAG=git describe --tags --abbrev=0
          echo "version-tag=$TAG" >> $env:GITHUB_ENV

      # Get next semantic build tag number
      - name: Get version
        run: |
          $MAJOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.minorVersion" -q -DforceStdout
          $PATCH=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.nextIncrementalVersion" -q -DforceStdout
          $FEATURE_VERSION=$MAJOR+'.'+$MINOR+'.'+$PATCH
          echo "Feature_Build=$FEATURE_VERSION-f${{ github.run_number }}" >> $env:GITHUB_ENV
          $COMMIT_DATETIME=(git log -n 1 --pretty=format:"%cd" --date='format:%Y%m%d_%H%M%S')
          $FEATURE_BUILD=$FEATURE_VERSION+'-f'+$COMMIT_DATETIME+'.'+$(git rev-parse --short HEAD)
          echo $FEATURE_BUILD

      - name: Build ${{ env.Feature_Build }} with Maven
        run: |
          echo "Version on feature branch will be ${{ env.Feature_Build }}"
          mvn versions:set -DnewVersion="${{ env.Feature_Build }}"
          mvn --batch-mode clean install

      - name: Tag the code - ${{ env.Feature_Build }}
        uses: mathieudutour/github-tag-action@v5.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.Feature_Build }}
          tag_prefix: ''

      # Required for Bridge to build *.exe installer
      - name: Install NSIS if not cached
        if: steps.cache_NSIS.outputs.cache-hit != 'true'
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
          choco install nsis.install --version=2.46 -y -dv

      # This step overwrites parts of the NSIS program with PK specific code.  I don't know what exactly.
      #      - name: Extract NSIS log if not cached
      #        if: steps.cache_NSIS.outputs.cache-hit != 'true'
      #        run: |
      #          echo "$(pwd)"
      #          7z.exe x "D:\a\pk-bridge\pk-bridge\bridge-build\nsis-2.46-log.zip" -o"C:\Program Files (x86)\NSIS" -y -r
      #          cd "D:\a\pk-bridge\pk-bridge"
      #          echo "$(pwd)"
      #          dir

      # Create Bridge exe file using NSIS
      #      - name: Create Bridge installer
      #        run: |
      #          & 'C:\Program Files (x86)\NSIS\makensis.exe' /DMIM_FILENAME="D:\a\pk-bridge\pk-bridge\bridge-build\bridge.zip" /DVERSION_NUMBER="${{ env.Feature_Build }}" /DPRODUCT_VERSION="${{ env.Feature_Build }}" "D:\a\pk-bridge\pk-bridge\installer\bridge\bridge.nsi"

      #      - name: Copy and Upload Bridge zip, exe, and setupexe via Maven
      #        run: |
      #          mkdir staging
      #          copy "D:/a/pk-bridge/pk-bridge/bridge-build/*.zip" staging
      #          copy "D:/a/pk-bridge/pk-bridge/installer/bridge/*.exe" staging
      #          copy "D:\a\pk-bridge\pk-bridge\installer\bridge\bridgesetup-${{ env.Feature_Build }}.exe" "D:\a\pk-bridge\pk-bridge\staging\bridge.exe"
      #          ./mvnw --batch-mode -f "uploadzip.xml" clean deploy -Drevision="${{ env.Feature_Build }}" -s .mvn/wrapper/settings.xml
      #          ./mvnw --batch-mode -f "uploadexe.xml" clean deploy -Drevision="${{ env.Feature_Build }}" -s .mvn/wrapper/settings.xml
      #          ./mvnw --batch-mode -f "uploadsetupexe.xml" clean deploy -Drevision="${{ env.Feature_Build }}" -s .mvn/wrapper/settings.xml

      # This will find no files under a PUSH request.  This is normal and expected.  It should only WARN.
#      - name: Upload Bridge artifacts to Github
#        uses: actions/upload-artifact@v2
#        with:
#          name: Bridge-${{ env.Feature_Build }}_Package
#          path: staging