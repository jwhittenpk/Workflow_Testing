# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build for Develop/Support/Hotfix branch

on:
  push:
    branches:
      - develop
      - support/**
      - hotfix/**

jobs:
  validate_name:
    runs-on: ubuntu-latest
    steps:
      - name: get jira name
        id: branch
        run: |
          if [[ ${GITHUB_REF#refs/heads/} == @(develop|master) ]]; then
           echo ::set-output name=jira::$(echo ${GITHUB_REF} |cut -d'/' -f3 | cut -d '-' -f1,2)  
          else
           echo ::set-output name=jira::$(echo ${GITHUB_REF} |cut -d'/' -f4 | cut -d '-' -f1,2)
          fi
      - name: jira Name from upper case to lower case
        id: string
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ steps.branch.outputs.jira }}
    outputs:
      jira_name: ${{ steps.string.outputs.lowercase }}

  Build_FizzBuzz:
    needs: validate_name
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        os: ['windows']
        jdk: [ '1.8' ]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Clone the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jdk }}

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-

      - name: Set up cache for NSIS v2.46
        id: cache_NSIS
        uses: actions/cache@v2
        with:
          path: C:\Program Files (x86)\NSIS
          key: ${{ matrix.os }}-nsis

      - name: Print branch names
        run: |
          echo "Branch name is: ${{ github.base_ref }}"
          echo "HEAD branch is: ${{ github.head_ref }}"

      - name: Get latest tag
        run: |
          $TAG=git describe --tags --abbrev=0
          echo "version-tag=$TAG" >> $env:GITHUB_ENV

      # Get next semantic build tag number
      - name: Get version
        run: |
          $MAJOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.minorVersion" -q -DforceStdout
          $INCREMENT=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.nextIncrementalVersion" -q -DforceStdout
          $NEXT_SEMANTIC_TAG=$MAJOR+'.'+$MINOR+'.'+$INCREMENT
          echo "version=$NEXT_SEMANTIC_TAG" >> $env:GITHUB_ENV

      # Get the current semantic build tag for the branch i.e excluding '-s' or '-d'
      - name: Get current build number
        id: get-current-version
        run: |
          $MAJOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.minorVersion" -q -DforceStdout
          $BUILDNUMBER=mvn build-helper:parse-version -D"version.version"=${{ env.version-tag }} help:evaluate -Dexpression="parsedVersion.incrementalVersion" -q -DforceStdout
          $CURRENT_VERSION=$MAJOR+'.'+$MINOR+'.'+$BUILDNUMBER
          $CURRENT_VERSION=$CURRENT_VERSION + $(
              if ( $${{ github.base_ref == 'develop' && startsWith(github.head_ref, 'feature/') }} ) {
                  "-d${{ github.run_number }}" }
              elseif ( $${{ github.event_name == 'schedule' }} ) {
                  "-d${{ github.run_number }}" }
              elseif ( $${{ startsWith(github.base_ref, 'support/') && startsWith(github.head_ref, 'feature/') }} ) {
                  "-s${{ github.run_number }}" }
              elseif ( $${{  startsWith(github.base_ref, 'hotfix/') && startsWith(github.head_ref, 'feature/') }} ) {
                  "-h${{ github.run_number }}" }
              else { 
                  exit 0
              }
          )
          echo "currentVersion=$CURRENT_VERSION" >> $env:GITHUB_ENV

      # Build and tag develop branch with '-d'
      - name: Build with Maven - ${{ env.currentVersion }}
        run: |
          echo "Version will be ${{ env.currentVersion }}"
          mvn versions:set -DnewVersion="${{ env.currentVersion }}"
          mvn --batch-mode clean install

      - name: Tag the code - ${{ env.currentVersion }}
        id: tag_version_develop
        uses: mathieudutour/github-tag-action@v5.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.currentVersion }}
          tag_prefix: ''

      # Required for Bridge to build *.exe installer
      - name: Install NSIS if not cached
        if: steps.cache_NSIS.outputs.cache-hit != 'true'
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
          choco install nsis.install --version=2.46 -y -dv

      # This step overwrites parts of the NSIS program with PK specific code.  I don't know what exactly.
#      - name: Extract NSIS log if not cached
#        if: steps.cache_NSIS.outputs.cache-hit != 'true'
#        run: |
#          echo "$(pwd)"
#          7z.exe x "D:\a\pk-bridge\pk-bridge\bridge-build\nsis-2.46-log.zip" -o"C:\Program Files (x86)\NSIS" -y -r
#          cd "D:\a\pk-bridge\pk-bridge"
#          echo "$(pwd)"
#          dir

      # Create Dispatcher. Copy zip and exe files.  Rename *.exe file. - develop branch
#      - name: Create Bridge installer
#        run: |
#          & 'C:\Program Files (x86)\NSIS\makensis.exe' /DMIM_FILENAME="D:\a\pk-bridge\pk-bridge\bridge-build\bridge.zip" /DVERSION_NUMBER="${{ env.currentVersion }}" /DPRODUCT_VERSION="${{ env.currentVersion }}" "D:\a\pk-bridge\pk-bridge\installer\bridge\bridge.nsi"

#      - name: Copy and Upload Bridge zip, exe, and setupexe via Maven
#        run: |
#          mkdir staging
#          copy "D:/a/pk-bridge/pk-bridge/bridge-build/*.zip" staging
#          copy "D:/a/pk-bridge/pk-bridge/installer/bridge/*.exe" staging
#          copy "D:\a\pk-bridge\pk-bridge\installer\bridge\bridgesetup-${{ env.currentVersion }}.exe" "D:\a\pk-bridge\pk-bridge\staging\bridge.exe"
#          ./mvnw --batch-mode -f "uploadzip.xml" clean deploy -Drevision="${{ env.currentVersion }}" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadexe.xml" clean deploy -Drevision="${{ env.currentVersion }}" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadsetupexe.xml" clean deploy -Drevision="${{ env.currentVersion }}" -s .mvn/wrapper/settings.xml

      # This will find no files under a PUSH request.  This is normal and expected.  It should only WARN.
#      - name: Upload Bridge artifacts to GitHub
#        uses: actions/upload-artifact@v2
#        with:
#          name: Bridge-${{ env.currentVersion }}_Package
#          path: staging