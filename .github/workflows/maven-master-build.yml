# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build, Deploy, and Tag Master branch

on:
  push:
    branches:
      - master

jobs:
  Release_Master:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        os: ['windows']
        jdk: [ '1.8' ]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Clone the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jdk }}

      # FIXME: Reminder to restore all 'mvn' to './mvnw' in real PK-Bridge
      # FIXME: Also '-s .mvn/wrapper/settings.xml'
#      - name: File System preparation
#        run: |
#          chmod 755 mvnw

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-

      # $CURRENT_PROJECT_VERSION is commit pushed into Master.
      # Version numbers are in <Major>.<Minor>.<Patch> format.  $MAJOR, $MINOR, and $PATCH are those respective numbers.
      # $MASTER_VERSION should be $CURRENT_PROJECT_VERSION without the possible $QUALIFIER, eg "1.0.245-d20220513_1553.abcdef" would be "1.0.245".
      - name: Calculate Master Version
        id: calculate_master_version
        run: |
          $CURRENT_PROJECT_VERSION=mvn help:evaluate -Dexpression="project.version" -q -DforceStdout
          $MAJOR=mvn build-helper:parse-version -D"version.version"=$CURRENT_PROJECT_VERSION help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=$CURRENT_PROJECT_VERSION help:evaluate -Dexpression="parsedVersion.minorVersion" -q -DforceStdout
          $PATCH=mvn build-helper:parse-version -D"version.version"=$CURRENT_PROJECT_VERSION help:evaluate -Dexpression="parsedVersion.buildNumber" -q -DforceStdout
          $MASTER_VERSION=$MAJOR+'.'+$MINOR+'.'+$PATCH
          echo "Version of push being merged into Master is $CURRENT_PROJECT_VERSION"
          echo "Master branch will be tagged $MASTER_VERSION after completion."
          echo "::set-output name=master-version::$MASTER_VERSION"

      # Required for Bridge to build *.exe installer
#      - name: Install NSIS
#        run: |
#         choco install nsis.install --version=2.46 -y

      # Required for Bridge to build via Maven
#      - name: Checkout config files before maven build
#        uses: actions/checkout@master
#        with:
#          repository: 'hcapatientkeeper/MOB_8_2_CONFIG'
#          token: ${{ secrets.ORG_GHTOKEN }}
#          path: config

      # Build Master branch
      - name: Build Master ${{ steps.calculate_master_version.outputs.master-version }} with Maven
        # FIXME: Change this from install to deploy.
        # Update version.txt file to allow users to quickly determine Bridge version.
        run: |
#          echo "${{ steps.calculate_master_version.outputs.master-version }}" > bridge-backend/meditechConfig/version.txt
          mvn versions:set -DnewVersion="${{ steps.calculate_master_version.outputs.master-version }}" versions:commit
          mvn --batch-mode clean install

      # Create Bridge.zip and Bridge.exe
#      - name: Create Bridge installer
#        run: |
#          $MASTER_VERSION="${{ steps.calculate_master_version.outputs.master-version }}"
#          & 'C:\Program Files (x86)\NSIS\makensis.exe' /DMIM_FILENAME="D:\a\pk-bridge\pk-bridge\bridge-build\bridge.zip" /DVERSION_NUMBER="$MASTER_VERSION" /DPRODUCT_VERSION="$MASTER_VERSION" "D:\a\pk-bridge\pk-bridge\installer\bridge\bridge.nsi"
#          mkdir staging

      # Copy zip and exe files to staging. Add version number to .exe file.
      # Then upload them to GitHub via deploy.
#      - name: Copy and Upload Bridge zip, exe, and setupexe via Maven
#        run: |
#          $MASTER_VERSION="${{ steps.calculate_master_version.outputs.master-version }}"
#          copy "D:/a/pk-bridge/pk-bridge/bridge-build/*.zip" staging
#          copy "D:/a/pk-bridge/pk-bridge/installer/bridge/*.exe" staging
#          copy "D:\a\pk-bridge\pk-bridge\installer\bridge\bridgesetup-$MASTER_VERSION.exe" "D:\a\pk-bridge\pk-bridge\staging\bridge.exe"
#          ./mvnw --batch-mode -f "uploadzip.xml" clean deploy -Drevision="$MASTER_VERSION" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadexe.xml" clean deploy -Drevision="$MASTER_VERSION" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadsetupexe.xml" clean deploy -Drevision="$MASTER_VERSION" -s .mvn/wrapper/settings.xml

      - name: Tag Master branch build as ${{ steps.calculate_master_version.outputs.master-version }}
        uses: mathieudutour/github-tag-action@v5.2
        with:
          # FIXME: github_token: ${{ secrets.ORG_GHTOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.calculate_master_version.outputs.master-version }}
          tag_prefix: ''